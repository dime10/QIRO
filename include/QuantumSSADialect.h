#ifndef MLIR_QUANTUMSSA_DIALECT_H
#define MLIR_QUANTUMSSA_DIALECT_H

#include "mlir/IR/Dialect.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/StandardTypes.h"

#include "QuantumDialect.h" // required for the unitary, hermitian, and metaop traits

namespace mlir {
namespace quantumssa {
namespace detail {

struct RstateTypeStorage;
struct COpTypeStorage;

} // end namespace detail

// This class represents the quantum state of one qubit at a single point in time.
class QstateType : public Type::TypeBase<QstateType, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static QstateType get(mlir::MLIRContext *ctx) { return Base::get(ctx); }
};

// This class represents the state of a quantum regist, which has a static size.
class RstateType : public Type::TypeBase<RstateType, mlir::Type, detail::RstateTypeStorage> {
public:
    using Base::Base;

    static RstateType get(mlir::MLIRContext *ctx, llvm::Optional<int> size);

    llvm::Optional<int> RstateType::getNumQubits();
};

// This class represents a native quantum gate on one qubit.
class U1Type : public Type::TypeBase<U1Type, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static U1Type get(mlir::MLIRContext *ctx) {
        return Base::get(ctx);
    }
};

// This class represents a native quantum gate on two qubits.
class U2Type : public Type::TypeBase<U2Type, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static U2Type get(mlir::MLIRContext *ctx) {
        return Base::get(ctx);
    }
};

// This class represents controlled operations, where the underlying operation
// could be a single op or an entire circuit.
class COpType : public Type::TypeBase<COpType, mlir::Type, detail::COpTypeStorage> {
public:
    using Base::Base;

    static COpType get(mlir::MLIRContext *ctx, llvm::Optional<int> nctrl, Type baseType);

    llvm::Optional<int> getNumCtrls();

    Type getBaseType();
};

// This class represents a quantum circuit, that is, a collection of quantum ops.
class FunCircType : public Type::TypeBase<FunCircType, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static FunCircType get(mlir::MLIRContext *ctx) {
        return Base::get(ctx);
    }
};
} // namespace quantumssa
} // namespace mlir


// Add autogenerated header files from the ODS system, which include operation declarations
#define GET_DIALECT_CLASSES
#include "QuantumSSAOpsDialect.h.inc"
#define GET_OP_CLASSES
#include "QuantumSSAOps.h.inc"

#endif // MLIR_QUANTUMSSA_DIALECT_H
