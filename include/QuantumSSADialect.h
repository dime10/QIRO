#ifndef MLIR_QUANTUMSSA_DIALECT_H
#define MLIR_QUANTUMSSA_DIALECT_H

#include "mlir/IR/Dialect.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/StandardTypes.h"

#include "QuantumDialect.h" // required for the unitary, hermitian, and metaop traits

namespace mlir {
namespace quantumssa {
namespace detail {

struct RstateTypeStorage;
struct COpTypeStorage;
struct FunCircTypeStorage;

} // end namespace detail

// Add autogenerated header files from the ODS system, which include operation declarations
#define GET_DIALECT_CLASSES
#include "QuantumSSAOpsDialect.h.inc"
#define GET_OP_CLASSES
#include "QuantumSSAOps.h.inc"

// This class represents the quantum state of one qubit at a single point in time.
class QstateType : public Type::TypeBase<QstateType, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static QstateType get(mlir::MLIRContext *ctx) { return Base::get(ctx); }
};

// This class represents the state of a quantum regist, which has a static size.
class RstateType : public Type::TypeBase<RstateType, mlir::Type, detail::RstateTypeStorage> {
public:
    using Base::Base;

    static RstateType get(mlir::MLIRContext *ctx, unsigned size);

    unsigned RstateType::getNumQubits();
};

// This class represents the state of quantum list, i.e. qubit register without declared size.
class LstateType : public Type::TypeBase<LstateType, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static LstateType get(mlir::MLIRContext *ctx) { return Base::get(ctx); }
};

// This class represents a singular quantum operation (such as a gate).
class OpType : public Type::TypeBase<OpType, mlir::Type, mlir::TypeStorage> {
public:
    using Base::Base;

    static OpType get(mlir::MLIRContext *ctx) {
        return Base::get(ctx);
    }
};

// This class represents controlled operations, where the underlying operation
// could be a single op or an entire circuit.
class COpType : public Type::TypeBase<COpType, mlir::Type, detail::COpTypeStorage> {
public:
    using Base::Base;

    static COpType get(mlir::MLIRContext *ctx, unsigned nctrl, Type baseType);

    unsigned getNumCtrls();

    Type getBaseType();
};

// This class represents a quantum circuit, that is, a collection of quantum ops.
class FunCircType : public Type::TypeBase<FunCircType, mlir::Type, detail::FunCircTypeStorage> {
public:
    using Base::Base;

    static FunCircType get(mlir::MLIRContext *ctx, FunctionType funtype);

    FunctionType getFunType();
};
} // namespace quantumssa
} // namespace mlir

#endif // MLIR_QUANTUMSSA_DIALECT_H
